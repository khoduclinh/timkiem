```csharp
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.IO;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using CorelDRAW;
using DevComponents.DotNetBar;
using ICSharpCode.SharpZipLib.Zip;
using iTextSharp.awt.geom;
using iTextSharp.text;
using iTextSharp.text.pdf;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using Color = System.Drawing.Color;

namespace GxVDPOverlay
{
    public partial class MainFormForCoreDrawOverlay : OfficeForm
    {
        #region Biến toàn bộ chương trình
        // (Giữ nguyên các biến từ tài liệu gốc)
        private bool DataIsOk = false;
        private bool IsDone = false;
        private int newPaiMoObjectRowCount = 1;
        private int newPaiMoObjectCount = 1;
        private int newPaiMoObjectColCount = 1;
        private DataTable dtbarcodeTable = null;
        private DataTable dataExcel = null;
        private DataTable dtText = null;
        private DataTable dtMakeNos = null;
        private DataTable dtTxt = null;
        private float ObjectPageWidth = 0f;
        private float ObjectPageHeight = 0f;
        private string BkPdf1 = "";
        private string BkPdf2 = "";
        private PaiMoObject[] PaiMoObjects = new PaiMoObject[500];
        private PaiMoMakeNo[] PaiMoMakeNos = new PaiMoMakeNo[500];
        private PaiMoPageNo[] PaiMoPageNos = new PaiMoPageNo[5];
        private mySize thismySize = default(mySize);
        private int pdfBarcodeCount = 0;
        private bool HavePdfBarcode = false;
        private string PdfBarcodeDir = "";
        private bool HaveEpsBarcode = false;
        private int CdrCount = 1000;
        private static string sysGsFile = "";
        private static string sysbcFile = "";
        #endregion

        // Hàm helper mới để xử lý xoay và căn chỉnh
        private void AddRotatedTemplate(PdfContentByte directContent, PdfImportedPage page, float rotation, float x, float y, float desiredWidth, float desiredHeight, string alignment = "Left")
        {
            // Lấy kích thước gốc của page
            float origWidth = page.Width;
            float origHeight = page.Height;

            // Khởi tạo ma trận biến đổi
            float a = 1f, b = 0f, c = 0f, d = 1f, tx = x, ty = y;

            // Tính scale dựa trên kích thước mong muốn
            float sx = desiredWidth / origWidth;
            float sy = desiredHeight / origHeight;

            // Xử lý căn chỉnh (alignment)
            float adj = 0f;
            if (alignment == "Center")
            {
                adj = (origWidth * sx - desiredWidth) / 2f;
            }
            else if (alignment == "Right")
            {
                adj = origWidth * sx - desiredWidth;
            }

            // Xử lý xoay và hoán đổi chiều nếu cần
            bool is90Rotate = (Math.Abs(rotation) == 90f || Math.Abs(rotation) == 270f);
            if (rotation == 90f) // Counterclockwise
            {
                a = 0f; b = sy; c = -sx; d = 0f;
                tx = x + desiredWidth; ty = y;
                if (is90Rotate)
                {
                    // Hoán đổi width/height cho alignment
                    ty -= adj; // Căn chỉnh trên Y sau xoay
                }
            }
            else if (rotation == -90f || rotation == 270f) // Clockwise
            {
                a = 0f; b = -sy; c = sx; d = 0f;
                tx = x; ty = y + desiredHeight;
                if (is90Rotate)
                {
                    ty += adj; // Căn chỉnh trên Y sau xoay
                }
            }
            else if (Math.Abs(rotation) == 180f) // 180 độ
            {
                a = -sx; b = 0f; c = 0f; d = -sy;
                tx = x + desiredWidth; ty = y + desiredHeight;
                tx -= adj; // Căn chỉnh trên X
            }
            else // Không xoay hoặc 360 độ
            {
                a = sx; b = 0f; c = 0f; d = sy;
                tx -= adj; // Căn chỉnh trên X
            }

            // Áp dụng template với ma trận biến đổi
            directContent.AddTemplate(page, a, b, c, d, tx, ty);
        }

        public bool GetPdf(DataTable dtPaiMoData, string tempPdfName, string tempDitinguishDataName, string tempDistinguishCdrName)
        {
            iTextSharp.text.Rectangle pageSize = new iTextSharp.text.Rectangle(this.thismySize.PaiMoWidth, this.thismySize.PaiMoHeight);
            iTextSharp.text.Document document = new iTextSharp.text.Document(pageSize);
            PdfWriter instance = PdfWriter.GetInstance(document, new FileStream(tempPdfName, FileMode.Create));
            document.Open();
            PdfContentByte directContent = instance.DirectContent;
            PdfReader pdfReader = new PdfReader(this.ReadFile(this.BkPdf2));
            PdfImportedPage importedPage = instance.GetImportedPage(pdfReader, 1);
            PdfReader pdfReader2 = new PdfReader(this.ReadFile(this.BkPdf1));
            PdfImportedPage importedPage2 = instance.GetImportedPage(pdfReader2, 1);
            PdfReader pdfReader3 = null;
            PdfReader reader = null;
            PdfReader reader2 = null;
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\txt.pdf"))
            {
                pdfReader3 = new PdfReader(this.ReadFile(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\txt.pdf"));
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\PdfTxt.pdf"))
            {
                reader2 = new PdfReader(this.ReadFile(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\PdfTxt.pdf"));
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data\\pdf\\txt\\sys_Distinguish.pdf"))
            {
                reader = new PdfReader(this.ReadFile(System.Windows.Forms.Application.StartupPath + "\\data\\pdf\\txt\\sys_Distinguish.pdf"));
            }
            directContent.AddTemplate(importedPage, 0f, 0f);
            int num = 0;
            for (int i = 0; i <= this.PaiMoObjects.Length - 1; i++)
            {
                if (this.PaiMoObjects[i].IsEffect == "Y")
                {
                    num++;
                }
            }
            bool flag5 = num == 0;
            bool result;
            if (flag5)
            {
                result = false;
            }
            else
            {
                if (this.dtTemplate.Rows[0]["FullPage"].ToString() == "Y")
                {
                    DataRow row = dtPaiMoData.Rows[dtPaiMoData.Rows.Count - 1];
                    int count = dtPaiMoData.Rows.Count;
                    int num2 = num - count % num;
                    for (int j = 1; j <= num2; j++)
                    {
                        dtPaiMoData.ImportRow(row);
                    }
                }

                int num3 = 0;
                int num4 = 1;
                int num5 = 0;
                this.InP.Minimum = 0;
                this.InP.Maximum = dtPaiMoData.Rows.Count - 1;
                float num6 = 0f;
                int num7 = 0;
                float num8 = 0f;
                if (this.dtTemplate.Rows[0]["Rotate90"].ToString() == "90")
                {
                    num8 = 90f;
                }
                else
                {
                    if (this.PaiMoObjects[0].Rotate == 90f)
                    {
                        num8 = 90f;
                    }
                }
                int num9 = 1;
                for (int k = 0; k <= dtPaiMoData.Rows.Count - 1; k++)
                {
                    this.InP.Value = k;
                    System.Windows.Forms.Application.DoEvents();
                    int num10 = int.Parse(dtPaiMoData.Rows[k]["ID"].ToString());
                    bool flag9 = true;
                    if (num3 == num)
                    {
                        num3 = 0;
                        document.NewPage();
                        directContent.AddTemplate(importedPage, 0f, 0f);
                        num4++;
                        flag9 = true;
                        num7 = 0;
                    }
                    if (num10 == -100)
                    {
                        num3++;
                        num5++;
                        num9++;
                    }
                    else
                    {
                        bool flag12 = flag9;
                        if (flag12)
                        {
                            if (this.PaiMoPageNos[0].IsEffect == "Y")
                            {
                                iTextSharp.text.Font font = FontFactory.GetFont("Helvetica", "Cp1252", true);
                                int fontC = this.PaiMoPageNos[0].FontC;
                                int fontM = this.PaiMoPageNos[0].FontM;
                                int fontY = this.PaiMoPageNos[0].FontY;
                                int fontK = this.PaiMoPageNos[0].FontK;
                                float fontSize = this.PaiMoPageNos[0].FontSize;
                                directContent.BeginText();
                                directContent.SetCMYKColorFill(fontC / 100 * 255, fontM / 100 * 255, fontY / 100 * 255, fontK / 100 * 255);
                                directContent.SetFontAndSize(font.BaseFont, fontSize);
                                directContent.ShowTextAligned(0, num4.ToString(), this.PaiMoPageNos[0].X, this.PaiMoPageNos[0].Y, this.PaiMoPageNos[0].Rotate);
                                directContent.EndText();
                            }
                        }
                        bool flag15 = false;
                        if (k == 0 || num6 != this.PaiMoObjects[num3].Y)
                        {
                            flag15 = true;
                            num6 = this.PaiMoObjects[num3].Y;
                        }
                        bool flag17 = flag15;
                        if (flag17)
                        {
                            try
                            {
                                iTextSharp.text.Font font2 = FontFactory.GetFont("Helvetica", "Cp1252", true);
                                int fontC2 = this.PaiMoMakeNos[num7].FontC;
                                int fontM2 = this.PaiMoMakeNos[num7].FontM;
                                int fontY2 = this.PaiMoMakeNos[num7].FontY;
                                int fontK2 = this.PaiMoMakeNos[num7].FontK;
                                float num11 = this.PaiMoMakeNos[num7].FontSize;
                                if (num11 <= 0f)
                                {
                                    num11 = 4f;
                                }
                                string text = dtPaiMoData.Rows[num5]["MakeNo"].ToString();
                                directContent.BeginText();
                                directContent.SetCMYKColorFill(fontC2 / 100 * 255, fontM2 / 100 * 255, fontY2 / 100 * 255, fontK2 / 100 * 255);
                                directContent.SetFontAndSize(font2.BaseFont, num11);
                                directContent.ShowTextAligned(0, text, this.PaiMoMakeNos[num7].X, this.PaiMoMakeNos[num7].Y, this.PaiMoMakeNos[num7].Rotate);
                                directContent.EndText();
                                num7++;
                            }
                            catch
                            {
                            }
                        }

                        // Sử dụng hàm AddRotatedTemplate cho background/main object
                        AddRotatedTemplate(directContent, importedPage2, num8, this.PaiMoObjects[num3].X, this.PaiMoObjects[num3].Y, 
                            this.PaiMoObjects[num3].Width, this.PaiMoObjects[num3].Height, "Left");

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\txt.pdf"))
                        {
                            int l = 0;
                            while (l <= this.dtDetail.Rows.Count - 1)
                            {
                                if (this.dtDetail.Rows[l]["mysysIsEffect"].ToString() == "Y" && this.dtDetail.Rows[l]["CdrType"].ToString() == "TXT")
                                {
                                    string columnName = this.dtDetail.Rows[l]["CdrField"].ToString() + "_sysPageNo";
                                    DataRow[] array = this.dtText.Select("ID='" + num10.ToString() + "'");
                                    if (array.Length != 0)
                                    {
                                        float x = this.PaiMoObjects[num3].X;
                                        float y = this.PaiMoObjects[num3].Y;
                                        // Sử dụng hàm AddRotatedTemplate cho txt.pdf
                                        AddRotatedTemplate(directContent, instance.GetImportedPage(pdfReader3, int.Parse(array[0][columnName].ToString())), 
                                            num8, x, y, this.PaiMoObjects[num3].Width, this.PaiMoObjects[num3].Height, "Left");
                                    }
                                }
                                l++;
                            }
                        }

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data\\Pdf\\PdfTxt.pdf"))
                        {
                            float x2 = this.PaiMoObjects[num3].X;
                            float y2 = this.PaiMoObjects[num3].Y;
                            // Sử dụng hàm AddRotatedTemplate cho PdfTxt.pdf
                            AddRotatedTemplate(directContent, instance.GetImportedPage(reader2, num10), 
                                num8, x2, y2, this.PaiMoObjects[num3].Width, this.PaiMoObjects[num3].Height, "Left");
                        }

                        for (int m = 0; m <= this.dtDetail.Rows.Count - 1; m++)
                        {
                            float num12 = 0f;
                            float.TryParse(this.dtDetail.Rows[m]["mysysRotate"].ToString(), out num12);
                            if (this.dtDetail.Rows[m]["mysysIsEffect"].ToString() == "Y")
                            {
                                string a = this.dtDetail.Rows[m]["CdrType"].ToString();
                                if (a == "BARCODE" || a == "PDFBARCODE")
                                {
                                    string text2 = string.Empty;
                                    if (HaveCompoundValue(dtDetail.Rows[m]["DataField"].ToString()))
                                    {
                                        text2 = this.dtDetail.Rows[m]["CdrField"].ToString();
                                    }
                                    else
                                    {
                                        text2 = this.dataExcel.Rows[num10 - 1][this.dtDetail.Rows[m]["DataField"].ToString()].ToString();
                                    }
                                    if (!string.IsNullOrEmpty(text2))
                                    {
                                        string text3 = "";
                                        string addcolumnname = string.Empty;
                                        if (a == "BARCODE" || a == "PDFBARCODE")
                                        {
                                            string text4 = System.Windows.Forms.Application.StartupPath + "\\data\\BarCode\\" + this.dtDetail.Rows[m]["CdrField"].ToString() + "\\";
                                            for (int n = 0; n <= this.dtbarcodeTable.Rows.Count - 1; n++)
                                            {
                                                if (text4 == this.dtbarcodeTable.Rows[n]["dir"].ToString() + "\\" && text2 == this.dtbarcodeTable.Rows[n]["str"].ToString())
                                                {
                                                    text2 = this.dtbarcodeTable.Rows[n]["number"].ToString();
                                                    break;
                                                }
                                            }
                                            text3 = text4 + text2 + ".pdf";
                                        }
                                        // (Các phần xử lý EPS, PDF, JPG giữ nguyên)
                                        if (!File.Exists(text3))
                                        {
                                            MessageBox.Show("没有文件：" + text3);
                                            return false;
                                        }
                                        PdfReader pdfReader4 = new PdfReader(this.ReadFile(text3));
                                        float desiredWidth = float.Parse(this.dtDetail.Rows[m]["mysysWidth"].ToString());
                                        float desiredHeight = float.Parse(this.dtDetail.Rows[m]["mysysHeight"].ToString());
                                        float x = float.Parse(this.dtDetail.Rows[m]["mysysLeftX"].ToString());
                                        float y = float.Parse(this.dtDetail.Rows[m]["mysysBottomY"].ToString());
                                        string alignment = this.dtDetail.Rows[m]["SelfAlignment"].ToString();
                                        // Sử dụng hàm AddRotatedTemplate cho barcode
                                        AddRotatedTemplate(directContent, instance.GetImportedPage(pdfReader4, 1), 
                                            num12, x, y, desiredWidth, desiredHeight, alignment);
                                    }
                                }
                            }
                        }
                        num3++;
                        num5++;
                        num9++;
                    }
                }
                document.Close();
                result = true;
            }
            return result;
        }

        // (Giữ nguyên các hàm khác từ tài liệu gốc)
        public string[][] read_csv(string text) { /* Giữ nguyên */ }
        public static DataTable XlSToDataTable(string strFilePath, string strTableName, int iSheetIndex) { /* Giữ nguyên */ }
        private void DataGridViewToExcel(DataGridView dgv) { /* Giữ nguyên */ }
        public void GetDataFromXlsx() { /* Giữ nguyên */ }
        public void GetDataFromXlsx1() { /* Giữ nguyên */ }
        public static string GetFulleNameByFileName(string DirName, string FileName) { /* Giữ nguyên */ }
        public void ExportDataToExcel(DataTable dtSource) { /* Giữ nguyên */ }
        public void ExportArrayToExcel(string[,] tmpArray) { /* Giữ nguyên */ }
        public void ExportDataToExcelFile(DataTable dtSource, string tempFileName) { /* Giữ nguyên */ }
        public bool DeleteDir(string strPath) { /* Giữ nguyên */ }
        public DataTable ProcessDataForPaiMo(string tempDistinguish) { /* Giữ nguyên */ }
        private void btnSpecial_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void snQty_KeyPress(object sender, KeyPressEventArgs e) { /* Giữ nguyên */ }
        private void btnPerSize_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void ribbonControl1_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void btnCleanMultiData_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void UpLoadBgPdf_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void DownLoadBgPdf_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void BlankQty_KeyPress(object sender, KeyPressEventArgs e) { /* Giữ nguyên */ }
        private void splitQty_KeyPress(object sender, KeyPressEventArgs e) { /* Giữ nguyên */ }
        private class RowComparer : IComparer { /* Giữ nguyên */ }
        private DataTable _dt;
        public DataTable Clipboard2DataTable(string pClipboard, bool FirstColIsHead) { /* Giữ nguyên */ }
        private void BtnClipboard_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void CbMultiData_CheckedChanged(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void CbSingleOrderNo_CheckedChanged(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void CbSizeReplace_CheckedChanged(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void CbTakeWidthInSize_CheckedChanged(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void CbAddQty_CheckedChanged(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void compressDirectory(string DirectoryPath, string OutputFilePath, int CompressionLevel = 9) { /* Giữ nguyên */ }
        private bool runSqlScriptFile(string pathStoreProceduresFile) { /* Giữ nguyên */ }
        private void BtnImport_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void BtnExport_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void ColorPickerButton1_ColorPreview(object sender, ColorPreviewEventArgs e) { /* Giữ nguyên */ }
        private void OpenSubfolder(string folder) { /* Giữ nguyên */ }
        private void OpenFolderEPS_Click(object sender, EventArgs e) { /* Giữ nguyên */ }
        private void ExportToExcelToolStripMenuItem_Click(object sender, EventArgs e) { /* Giữ nguyên */ }

        // (Giữ nguyên các biến global từ tài liệu gốc)
        private string myFontName = "";
        private string FileName = "";
        private DataTable dtQueried = null;
        private string WholePage_PageNo_FontName = "";
        private float WholePage_PageNo_FontSize = 8f;
        private int WholePage_PageNo_Rotate = 0;
        private DataTable dtOrderNos = null;
        private string WholePage_MakeNo_FontName = "";
        private float WholePage_MakeNo_FontSize = 8f;
        private int WholePage_MakeNo_Rotate = 0;
        private bool isMultiDataBegin = false;
        protected DataTable dtData;
        protected DataTable dtTemplate;
        protected DataTable dtDetail;
        protected DataTable dtDataClone;
        protected DataTable dtSn;
        private bool IsNormalData = true;
        private bool HaveSetFont = false;
        private string MakeNoFontName = "";
        private double MakeNoFontSize = 1.0;
        private double MakeNoFontAngle = 0.0;
        private double MakeNoFontCharSpace = 1.0;
        private int count = 1;
        private double PageNoFontAngle = 0.0;
        private bool badd1 = false;
        private bool badd2 = false;
        private bool bedit1 = false;
        private bool bedit2 = false;
        private bool IsOk = false;
        private int myPageNos = 0;
        private string myCopySourceTemplateName = "";
        public string ConStr;
        public string Business_ConStr;
        private List<int> LeftRow = new List<int>();
        private DataGridView mydg = null;
    }
}
```